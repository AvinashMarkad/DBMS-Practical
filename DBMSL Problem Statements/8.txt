Below is a simple example of how to implement MySQL/Oracle database connectivity with a front-end language (in this case, Python with the `Tkinter` library for GUI) to perform basic database navigation operations such as adding, deleting, and editing records.

This example uses MySQL as the database backend, but it can be easily adapted for Oracle or any other database with the appropriate driver (e.g., `cx_Oracle` for Oracle).

### Steps:
1. **Install MySQL Connector for Python**:
   You can install the MySQL connector by running the following command:
   ```bash
   pip install mysql-connector-python
   ```

2. **Create a Database**:
   Let's assume you have a `users` table with the following structure in MySQL:

   ```sql
   CREATE DATABASE my_database;

   USE my_database;

   CREATE TABLE users (
       id INT AUTO_INCREMENT PRIMARY KEY,
       name VARCHAR(100),
       email VARCHAR(100)
   );
   ```

3. **Python Program for Database Operations (Add, Edit, Delete)**:

```python
import tkinter as tk
from tkinter import messagebox
import mysql.connector

# Database connection configuration
db_config = {
    "host": "localhost",
    "user": "root",
    "password": "password",
    "database": "my_database"
}

# Connect to the database
def connect_db():
    try:
        conn = mysql.connector.connect(**db_config)
        return conn
    except mysql.connector.Error as err:
        messagebox.showerror("Database Error", f"Error: {err}")
        return None

# Function to add a new user
def add_user():
    name = entry_name.get()
    email = entry_email.get()
    
    if not name or not email:
        messagebox.showwarning("Input Error", "Name and email are required.")
        return

    conn = connect_db()
    if conn:
        cursor = conn.cursor()
        query = "INSERT INTO users (name, email) VALUES (%s, %s)"
        cursor.execute(query, (name, email))
        conn.commit()
        cursor.close()
        conn.close()
        messagebox.showinfo("Success", "User added successfully.")
        refresh_data()

# Function to edit an existing user
def edit_user():
    selected_user = listbox_users.curselection()
    if not selected_user:
        messagebox.showwarning("Selection Error", "Please select a user to edit.")
        return
    
    user_id = listbox_users.get(selected_user[0]).split(" - ")[0]
    name = entry_name.get()
    email = entry_email.get()
    
    if not name or not email:
        messagebox.showwarning("Input Error", "Name and email are required.")
        return

    conn = connect_db()
    if conn:
        cursor = conn.cursor()
        query = "UPDATE users SET name = %s, email = %s WHERE id = %s"
        cursor.execute(query, (name, email, user_id))
        conn.commit()
        cursor.close()
        conn.close()
        messagebox.showinfo("Success", "User updated successfully.")
        refresh_data()

# Function to delete a user
def delete_user():
    selected_user = listbox_users.curselection()
    if not selected_user:
        messagebox.showwarning("Selection Error", "Please select a user to delete.")
        return
    
    user_id = listbox_users.get(selected_user[0]).split(" - ")[0]
    
    conn = connect_db()
    if conn:
        cursor = conn.cursor()
        query = "DELETE FROM users WHERE id = %s"
        cursor.execute(query, (user_id,))
        conn.commit()
        cursor.close()
        conn.close()
        messagebox.showinfo("Success", "User deleted successfully.")
        refresh_data()

# Function to refresh the user list
def refresh_data():
    listbox_users.delete(0, tk.END)
    conn = connect_db()
    if conn:
        cursor = conn.cursor()
        query = "SELECT id, name, email FROM users"
        cursor.execute(query)
        users = cursor.fetchall()
        for user in users:
            listbox_users.insert(tk.END, f"{user[0]} - {user[1]} - {user[2]}")
        cursor.close()
        conn.close()

# GUI Setup
root = tk.Tk()
root.title("Database Operations")

frame = tk.Frame(root)
frame.pack(padx=10, pady=10)

label_name = tk.Label(frame, text="Name:")
label_name.grid(row=0, column=0, padx=5, pady=5)

entry_name = tk.Entry(frame)
entry_name.grid(row=0, column=1, padx=5, pady=5)

label_email = tk.Label(frame, text="Email:")
label_email.grid(row=1, column=0, padx=5, pady=5)

entry_email = tk.Entry(frame)
entry_email.grid(row=1, column=1, padx=5, pady=5)

btn_add = tk.Button(frame, text="Add User", command=add_user)
btn_add.grid(row=2, column=0, padx=5, pady=5)

btn_edit = tk.Button(frame, text="Edit User", command=edit_user)
btn_edit.grid(row=2, column=1, padx=5, pady=5)

btn_delete = tk.Button(frame, text="Delete User", command=delete_user)
btn_delete.grid(row=2, column=2, padx=5, pady=5)

listbox_users = tk.Listbox(root, height=10, width=50)
listbox_users.pack(padx=10, pady=10)

refresh_data()

root.mainloop()
```

### Explanation:
1. **Database Connection**: The `connect_db` function connects to the MySQL database using the provided configuration (`db_config`). It returns the connection object.
2. **CRUD Operations**:
   - **Add**: The `add_user` function inserts a new user into the `users` table.
   - **Edit**: The `edit_user` function updates the selected user's information in the `users` table.
   - **Delete**: The `delete_user` function deletes the selected user from the `users` table.
3. **UI Components**:
   - The `Tkinter` library is used for creating a simple GUI to display a list of users, and forms to input or edit user data.
   - **Listbox** displays the current users from the database.
4. **Refresh Data**: The `refresh_data` function retrieves and displays all users from the `users` table in the `listbox_users`.

### Usage:
1. Enter the name and email of a user.
2. Click "Add User" to add a new user.
3. Select a user from the list and edit their name or email, then click "Edit User" to update their details.
4. Select a user and click "Delete User" to remove them from the database.

This program will work with MySQL. For Oracle, you would need to use the `cx_Oracle` connector and adjust the connection setup accordingly.